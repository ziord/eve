## capture test
let caps = [None, None, None, None, None];
let i = 0;
for let x in [1, 2, 3, 4, 5] {
    caps[i] = fn () {show "captured ->", x; return x; };
    i += 1;
}

i = 0;
let list = [1, 2, 3, 4, 5];
while i < 5 {
    assert caps[i]() == list[i];
    i += 1;
}

## expr test
for let x in #{"a": 1, "b": 2, "c": 3, "d": 4} {
    show x;
}

## scope test
assert (try x) == "Name 'x' is not defined";

for let x in [1, 2, 3, 4, 5] {
    show x;
}

## iter, next test
let vals = [1, 2, 3, 4, 5];
let keys = ["a", "b", "c", "d", "e"];
let dict = #{};
let iter_vals = core::iter(vals);
for let k in keys {
    dict[k] = try core::next(iter_vals);
}
show dict;
assert core::hashmap::len(dict) == 5;
for let k in dict {
    assert dict[k];  ## todo: test dict[k] is in vals
}

