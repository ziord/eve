## capture test
let caps = [None, None, None, None, None];
let i = 0;
for let x in [1, 2, 3, 4, 5] {
    caps[i] = fn () {show "captured ->", x; return x; };
    i += 1;
}

i = 0;
let list = [1, 2, 3, 4, 5];
while i < 5 {
    assert caps[i]() == list[i];
    i += 1;
}

## expr test
for let x in #{"a": 1, "b": 2, "c": 3, "d": 4} {
    show x;
}

## scope test
assert (try x) == "Name 'x' is not defined";

for let x in [1, 2, 3, 4, 5] {
    show x;
}

## iter, next test
let vals = [1, 2, 3, 4, 5];
let keys = ["a", "b", "c", "d", "e"];
let dict = #{};
let iter_vals = core::iter(vals);
for let k in keys {
    dict[k] = try core::next(iter_vals);
}
show dict;
assert core::hashmap::len(dict) == 5;
for let k in dict {
    assert dict[k];  ## todo: test dict[k] is in vals
}

## user-defined iterables
struct Seq {
    @compose: start, end, _curr;
    @compose: iter, next;
    @declare: new => fn (start, end) {
        let self = None;
        fn iter() {
            return self;
        }

        fn next() {
            if self._curr >= self.end {
                throw "StopIteration";
            } else {
                let ret = self._curr;
                self._curr += 1;
                return ret;
            }
        }
        self = Seq {
            iter = iter, next = next, start = start,
            end = end, _curr = start
        };
        return self;
    };
}

let seq = Seq::new(1, 8);
show seq, seq.start, seq.end;
let checks = [1, 2, 3, 4, 5, 6, 7];
for let i in seq {
    show i;
    assert checks[i - 1] == i;
}
assert try core::next(seq) == "StopIteration";
seq = Seq::new(5, 10);
assert core::iter(seq) == seq;
assert core::next(seq) == 5;
assert core::next(seq) == 6;
assert core::next(seq) == 7;
assert core::next(seq) == 8;
assert core::next(seq) == 9;
assert try core::next(seq) == "StopIteration";

for let e in Seq::new(1, 8) {
    assert e == 1;
    break;
}
