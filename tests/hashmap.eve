assert #{"name": "jon", 5: 0xffff, 888: 5}["name"] == #{1: "jon"}[1];
show #{true: None, None: false, false: None}, 2 / 4 * 0xff, ["yo!"];
assert #{"ball": 0xb, 2: "b", 3: "c", "dog": [1, 2, 3, #{"a": "apple", "b": "bag"}, "crab"]}["dog"][-2]["a"][2] == "p";
let x = #{"a": 0xff, "b": false};
x["a"] <<= 5;
x["a"] |= 2;
x["a"] ^= 4;
x["a"] += x["a"];
x["a"] -= 12;
x["a"] *= 8;
x["a"] **= 3;
x["a"] /= 8;
assert x["a"] >= 2.78189e+14;
x["a"] = #{"test": "passing"};
assert x["a"]["test"] == "passing";
x["a"]["fan"] = [1, 2, 3];
assert x["a"]["fan"][-2] == 2;
assert x;

let dict = #{};
struct Foo {}
dict[Foo] = 5;
let a = Foo;
fn Foo() {}
let b = Foo;
dict[Foo] = 10;
dict["Foo"] = 15;

assert dict[a] == 5;
assert dict[b] == 10;
assert dict["Foo"] == 15;

let dict = #{};
struct Foo {@compose x; @declare y => "p";}
dict[Foo] = 5;
let a = Foo;
fn Foo() {}
let b = Foo;
dict[Foo] = 10;
dict["Foo"] = 15;

assert dict[a] == 5;
assert dict[b] == 10;
assert dict["Foo"] == 15;