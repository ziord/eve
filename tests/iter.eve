struct Seq {
    @compose: start, end, _curr;
    @compose: iter, next;
    @declare: new => fn (start, end) {
        let self = None;
        fn iter() {
            return self;
        }

        fn next() {
            if self._curr >= self.end {
                throw "oops";
            } else {
                let ret = self._curr;
                self._curr += 1;
                return ret;
            }
        }
        self = Seq {
            iter = iter, next = next, start = start,
            end = end, _curr = start
        };
        return self;
    };
}

fn do_iter() {
    let seq = Seq::new(1, 3);
    show seq, seq.start, seq.end;
    let checks = [1, 2, 3, 4, 5, 6, 7];
    for let i in seq {
        show i;
        assert checks[i - 1] == i;
    }
}

let err = None;
try do_iter() ? err;
assert err == "oops";

struct Seq {
    @compose: start, end, _curr;
    @compose: iter, next;
    @declare: new => fn (start, end) {
        let self = None;
        fn iter() {
            return self;
        }

        fn next() {
            if self._curr >= self.end {
                throw core::StopIteration;
            } else {
                let ret = self._curr;
                self._curr += 1;
                return ret;
            }
        }
        self = Seq {
            iter = iter, next = next, start = start,
            end = end, _curr = start
        };
        return self;
    };
}

let seq = Seq::new(1, 8);
show seq, seq.start, seq.end;
let checks = [1, 2, 3, 4, 5, 6, 7];
for let i in seq {
    show i;
    assert checks[i - 1] == i;
}
assert try core::next(seq) == core::StopIteration;
seq = Seq::new(5, 10);
assert core::iter(seq) == seq;
assert core::next(seq) == 5;
assert core::next(seq) == 6;
assert core::next(seq) == 7;
assert core::next(seq) == 8;
assert core::next(seq) == 9;
assert try core::next(seq) == core::StopIteration;

for let e in Seq::new(1, 8) {
    assert e == 1;
    break;
}
